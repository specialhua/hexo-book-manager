name: Build Cross-Platform Application

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        node-version: [18.x]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run type check
      run: npm run type-check
    
    - name: Build Electron application
      run: npm run build:electron
    
    - name: Build desktop application
      run: npm run build
      env:
        # 为 electron-builder 提供 GitHub token（用于发布）
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # 根据是否为 tag 推送决定是否发布
        PUBLISH: ${{ startsWith(github.ref, 'refs/tags/v') && 'always' || 'never' }}
    
    - name: List build outputs (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "Build completed successfully!"
        echo "Contents of release directory:"
        dir release
      shell: cmd
    
    - name: List build outputs (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        echo "Build completed successfully!"
        echo "Contents of release directory:"
        ls -la release/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-build-${{ github.sha }}
        path: |
          release/
        retention-days: 30
    
    # Backup release method (if electron-builder fails)
    - name: Create Release (Backup)
      if: startsWith(github.ref, 'refs/tags/v') && failure()
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}