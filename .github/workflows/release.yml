name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Validate version format
      run: |
        if [[ ! "${{ github.event.inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Version must be in format v1.2.3"
          exit 1
        fi
    
    - name: Update package.json version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        VERSION_NUMBER="${VERSION#v}"
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        if [ "$CURRENT_VERSION" != "$VERSION_NUMBER" ]; then
          npm version $VERSION_NUMBER --no-git-tag-version
          echo "VERSION_CHANGED=true" >> $GITHUB_ENV
        else
          echo "Version $VERSION_NUMBER already set in package.json"
          echo "VERSION_CHANGED=false" >> $GITHUB_ENV
        fi
    
    - name: Commit version bump
      if: env.VERSION_CHANGED == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json package-lock.json
        git commit -m "Bump version to ${{ github.event.inputs.version }}"
    
    - name: Push changes
      if: env.VERSION_CHANGED == 'true'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
    
    - name: Create and push tag
      run: |
        if git rev-parse "${{ github.event.inputs.version }}" >/dev/null 2>&1; then
          echo "Tag ${{ github.event.inputs.version }} already exists"
        else
          git tag ${{ github.event.inputs.version }}
          git push origin ${{ github.event.inputs.version }}
        fi

  build:
    needs: create-release
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        node-version: [18.x]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository (with new tag)
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.version }}
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run type check
      run: npm run type-check
    
    - name: Build Electron application
      run: npm run build:electron
    
    - name: Build and publish desktop application
      run: npm run build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: List build outputs (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "Build completed successfully!"
        echo "Contents of release directory:"
        dir release
      shell: cmd
    
    - name: List build outputs (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        echo "Build completed successfully!"
        echo "Contents of release directory:"
        ls -la release/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-build-${{ github.event.inputs.version }}
        path: |
          release/
        retention-days: 30

  create-github-release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: List downloaded artifacts
      run: |
        echo "Downloaded artifacts:"
        find ./artifacts -type f -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" | sort
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version }}
        name: Release ${{ github.event.inputs.version }}
        body: |
          ðŸš€ Release ${{ github.event.inputs.version }}
          
          ## Downloads
          - **Windows**: Download the `.exe` installer or portable version
          - **macOS**: Download the `.dmg` file
          - **Linux**: Download the `.AppImage` or `.deb` package
          
          ## Changes
          Please check the commit history for detailed changes.
        files: |
          ./artifacts/**/*.exe
          ./artifacts/**/*.dmg
          ./artifacts/**/*.AppImage
          ./artifacts/**/*.deb
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}